buildscript {
    ext {
        Properties constants = new Properties()
        file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_platform_version = constants.getProperty("cordaPlatformVersion").toInteger()
        corda_gradle_plugins_version = constants.getProperty("cordaGradlePluginsVersion")
        jvm_target = constants.getProperty("jvmTargetVersion")
        junit_version = constants.getProperty("junitVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        kotlin_lang_version = constants.getProperty("kotlinLangVersion")
        kotlin_api_version = constants.getProperty("kotlinAPIVersion")
        quasar_version = constants.getProperty("quasarVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        log4j_version = constants.getProperty("log4jVersion")
        spring_boot_version = constants.getProperty("springBootVersion")
        spring_boot_gradle_plugin_version = constants.getProperty("springBootGradlePluginVersion")
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'kotlin'
    apply plugin: 'net.corda.plugins.cordapp'
    apply plugin: 'net.corda.plugins.cordformation'
    apply plugin: 'net.corda.plugins.quasar-utils'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

        testCompile "junit:junit:$junit_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "$kotlin_lang_version"
            apiVersion = "$kotlin_api_version"
            jvmTarget = "$jvm_target"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    // General dependencies
    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    // Corda dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":contracts")
    cordapp project(":workflows")
}

cordapp {
    info {
        name "Energy Account CorDapp"
        vendor "Ramzi El-Yafi"
        targetPlatformVersion corda_platform_version
        minimumPlatformVersion corda_platform_version
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "$jvm_target"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "$jvm_target"
    }
}

def nodeConfig = {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contracts')
        cordapp project(':workflows')
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10100
        rpcSettings {
            address("localhost:10111")
            adminAddress("localhost:10112")
        }
        sshdPort 10113
    }
    node {
        name "O=Government Regulator,L=London,C=GB"
        p2pPort 10120
        rpcSettings {
            address("localhost:10121")
            adminAddress("localhost:10122")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        sshdPort 10123
    }
    node {
        name "O=British Energy,L=Manchester,C=GB"
        p2pPort 10130
        rpcSettings {
            address("localhost:10131")
            adminAddress("localhost:10132")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        sshdPort 10133
    }
    node {
        name "O=UK Power,L=Newcastle,C=GB"
        p2pPort 10140
        rpcSettings {
            address("localhost:10141")
            adminAddress("localhost:10142")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        sshdPort 10143
    }
}

task prepareLocalNodes(type: net.corda.plugins.Cordform,
                       group: "deployment",
                       dependsOn: ['jar']) {
    configure nodeConfig
}

task prepareDockerNodes(type: net.corda.plugins.Dockerform,
                        group: "deployment",
                        dependsOn: ['jar', 'clients:bootJar']) {

    def nodesFolder = new File("build/nodes")

    if ( !nodesFolder.exists() ) {
        nodesFolder.mkdirs()
    }

    def dockerComposeFile = new File("build/nodes/docker-compose.yml")
    dockerComposeFile.delete()
    dockerComposeFile.createNewFile()

    configure nodeConfig
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}
